#!/bin/bash
#
# JouleTrace Part 1: System Configuration Installer
# 
# This script configures your Xeon system for single-socket energy measurement:
# 1. Updates GRUB to isolate Socket 0 CPUs
# 2. Creates rc.local for turbo/frequency control
# 3. Configures MSR module auto-loading
# 4. Updates bootloader
#
# Usage: sudo bash install_part1.sh
#

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if running as root
if [ "$EUID" -ne 0 ]; then 
    echo -e "${RED}ERROR: This script must be run as root${NC}"
    echo "Usage: sudo bash $0"
    exit 1
fi

echo -e "${BLUE}========================================${NC}"
echo -e "${BLUE}JouleTrace Part 1: System Configuration${NC}"
echo -e "${BLUE}========================================${NC}"
echo ""

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Backup existing configurations
BACKUP_DIR="/root/jouletrace-backup-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"

echo -e "${YELLOW}Step 1: Creating backups...${NC}"

if [ -f /etc/default/grub.d/jouletrace-isolation.cfg ]; then
    cp /etc/default/grub.d/jouletrace-isolation.cfg "$BACKUP_DIR/"
    echo "  ✓ Backed up existing GRUB config"
fi

if [ -f /etc/rc.local ]; then
    cp /etc/rc.local "$BACKUP_DIR/"
    echo "  ✓ Backed up existing rc.local"
fi

if [ -f /etc/modules-load.d/jouletrace.conf ]; then
    cp /etc/modules-load.d/jouletrace.conf "$BACKUP_DIR/"
    echo "  ✓ Backed up existing modules config"
fi

echo "  Backups saved to: $BACKUP_DIR"
echo ""

# Step 2: Update GRUB configuration
echo -e "${YELLOW}Step 2: Updating GRUB isolation config...${NC}"

cat > /etc/default/grub.d/jouletrace-isolation.cfg << 'EOF'
#!/bin/bash
# JouleTrace Socket 0 Isolation Configuration
# Auto-generated by install_part1.sh

# Socket 0 CPUs: 0,2,4,6,8,10,12,14,18,22,24,26,28,30,34,36,38,40,42,44,46
# Socket 1 CPUs: 1,3,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47

GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX isolcpus=0,2,4,6,8,10,12,14,18,22,24,26,28,30,34,36,38,40,42,44,46"
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX nohz_full=0,2,4,6,8,10,12,14,18,22,24,26,28,30,34,36,38,40,42,44,46"
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX rcu_nocbs=0,2,4,6,8,10,12,14,18,22,24,26,28,30,34,36,38,40,42,44,46"
GRUB_CMDLINE_LINUX="$GRUB_CMDLINE_LINUX intel_pstate=disable"

export GRUB_CMDLINE_LINUX
EOF

chmod +x /etc/default/grub.d/jouletrace-isolation.cfg
echo "  ✓ Created /etc/default/grub.d/jouletrace-isolation.cfg"
echo ""

# Step 3: Create rc.local
echo -e "${YELLOW}Step 3: Creating rc.local for boot-time configuration...${NC}"

cat > /etc/rc.local << 'EOF'
#!/bin/bash
# JouleTrace Boot Configuration
# Disables turbo boost and locks CPU frequency

set -e

LOG_FILE="/var/log/jouletrace-boot.log"
exec 1>> "$LOG_FILE"
exec 2>> "$LOG_FILE"

echo "========================================"
echo "JouleTrace Boot Configuration"
echo "Timestamp: $(date)"
echo "========================================"

# 1. Disable Turbo Boost
echo "Disabling turbo boost..."

if [ -f /sys/devices/system/cpu/intel_pstate/no_turbo ]; then
    echo 1 > /sys/devices/system/cpu/intel_pstate/no_turbo
    echo "✓ Disabled via intel_pstate"
elif [ -f /sys/devices/system/cpu/cpufreq/boost ]; then
    echo 0 > /sys/devices/system/cpu/cpufreq/boost
    echo "✓ Disabled via cpufreq boost"
else
    # MSR-based turbo disable
    if command -v wrmsr &> /dev/null; then
        for cpu in /sys/devices/system/cpu/cpu[0-9]*; do
            cpu_num=$(basename "$cpu" | sed 's/cpu//')
            if [ -f "$cpu/online" ]; then
                online=$(cat "$cpu/online" 2>/dev/null || echo "1")
                if [ "$online" = "1" ] || [ ! -f "$cpu/online" ]; then
                    wrmsr -p "$cpu_num" 0x1a0 0x4000850089 2>/dev/null || true
                fi
            fi
        done
        echo "✓ Disabled via MSR register"
    else
        echo "⚠ Warning: Could not disable turbo boost"
    fi
fi

# 2. Lock CPU Frequency
echo "Locking CPU frequencies to base 2.6 GHz..."

BASE_FREQ_KHZ=2600000

for cpu_dir in /sys/devices/system/cpu/cpu[0-9]*/cpufreq; do
    if [ -d "$cpu_dir" ]; then
        cpu_num=$(basename "$(dirname "$cpu_dir")" | sed 's/cpu//')
        
        # Set governor to userspace
        if [ -f "$cpu_dir/scaling_governor" ]; then
            echo "userspace" > "$cpu_dir/scaling_governor" 2>/dev/null || true
        fi
        
        # Lock frequency
        if [ -f "$cpu_dir/scaling_setspeed" ]; then
            echo "$BASE_FREQ_KHZ" > "$cpu_dir/scaling_setspeed" 2>/dev/null || true
        fi
        
        # Set min/max
        if [ -f "$cpu_dir/scaling_min_freq" ]; then
            echo "$BASE_FREQ_KHZ" > "$cpu_dir/scaling_min_freq" 2>/dev/null || true
        fi
        if [ -f "$cpu_dir/scaling_max_freq" ]; then
            echo "$BASE_FREQ_KHZ" > "$cpu_dir/scaling_max_freq" 2>/dev/null || true
        fi
    fi
done

echo "✓ Frequency locking complete"

# 3. Verification
echo ""
echo "Verification:"
echo "-------------"

if [ -f /sys/devices/system/cpu/isolated ]; then
    echo "Isolated CPUs: $(cat /sys/devices/system/cpu/isolated)"
fi

# Sample frequencies
for cpu in 0 2 4; do
    if [ -f "/sys/devices/system/cpu/cpu$cpu/cpufreq/scaling_cur_freq" ]; then
        freq=$(cat "/sys/devices/system/cpu/cpu$cpu/cpufreq/scaling_cur_freq")
        governor=$(cat "/sys/devices/system/cpu/cpu$cpu/cpufreq/scaling_governor" 2>/dev/null || echo "unknown")
        echo "  CPU $cpu: $freq kHz (governor: $governor)"
    fi
done

echo ""
echo "Boot configuration complete!"
echo "========================================"

exit 0
EOF

chmod +x /etc/rc.local
echo "  ✓ Created /etc/rc.local"
echo ""

# Step 4: Configure MSR module
echo -e "${YELLOW}Step 4: Configuring MSR module auto-loading...${NC}"

cat > /etc/modules-load.d/jouletrace.conf << 'EOF'
# JouleTrace MSR Module Configuration
# Required for PCM energy measurements and turbo control
msr
EOF

echo "  ✓ Created /etc/modules-load.d/jouletrace.conf"

# Load MSR module now
modprobe msr 2>/dev/null || true
echo "  ✓ Loaded MSR module"
echo ""

# Step 5: Enable rc-local service
echo -e "${YELLOW}Step 5: Enabling rc-local service...${NC}"

# Create systemd service if it doesn't exist
if [ ! -f /etc/systemd/system/rc-local.service ]; then
    cat > /etc/systemd/system/rc-local.service << 'EOF'
[Unit]
Description=/etc/rc.local Compatibility
ConditionPathExists=/etc/rc.local

[Service]
Type=forking
ExecStart=/etc/rc.local start
TimeoutSec=0
StandardOutput=journal
RemainAfterExit=yes
SysVStartPriority=99

[Install]
WantedBy=multi-user.target
EOF
    echo "  ✓ Created rc-local.service"
fi

systemctl daemon-reload
systemctl enable rc-local.service
echo "  ✓ Enabled rc-local service"
echo ""

# Step 6: Install msr-tools if not present
echo -e "${YELLOW}Step 6: Checking for msr-tools...${NC}"

if ! command -v wrmsr &> /dev/null; then
    echo "  Installing msr-tools..."
    apt-get update -qq
    apt-get install -y msr-tools
    echo "  ✓ Installed msr-tools"
else
    echo "  ✓ msr-tools already installed"
fi
echo ""

# Step 7: Update GRUB
echo -e "${YELLOW}Step 7: Updating GRUB bootloader...${NC}"

update-grub
echo "  ✓ GRUB updated"
echo ""

# Step 8: Create verification script
echo -e "${YELLOW}Step 8: Creating verification script...${NC}"

cat > /root/verify_part1_config.py << 'VERIFY_EOF'
#!/usr/bin/env python3
"""Post-reboot verification for JouleTrace Part 1."""

import os
import sys
import subprocess
from pathlib import Path

SOCKET_0_CPUS = [0, 2, 4, 6, 8, 10, 12, 14, 18, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46]

class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'

def check(name, passed, details=""):
    status = f"{Colors.GREEN}✓{Colors.END}" if passed else f"{Colors.RED}✗{Colors.END}"
    print(f"{status} {name}")
    if details:
        print(f"  {details}")
    return passed

def main():
    print(f"{Colors.BOLD}JouleTrace Part 1 Verification{Colors.END}\n")
    
    checks = []
    
    # Kernel parameters
    cmdline = Path("/proc/cmdline").read_text()
    expected = ",".join(map(str, SOCKET_0_CPUS))
    checks.append(check("isolcpus parameter", f"isolcpus={expected}" in cmdline))
    checks.append(check("nohz_full parameter", f"nohz_full={expected}" in cmdline))
    checks.append(check("rcu_nocbs parameter", f"rcu_nocbs={expected}" in cmdline))
    checks.append(check("intel_pstate=disable", "intel_pstate=disable" in cmdline))
    
    # CPU isolation
    if Path("/sys/devices/system/cpu/isolated").exists():
        isolated = Path("/sys/devices/system/cpu/isolated").read_text().strip()
        checks.append(check("Socket 0 isolated", True, f"Isolated: {isolated}"))
    else:
        checks.append(check("Socket 0 isolated", False, "No isolation file"))
    
    # MSR module
    lsmod = subprocess.check_output(["lsmod"], text=True)
    checks.append(check("MSR module loaded", "msr" in lsmod))
    
    # Frequency
    freq_file = Path("/sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq")
    if freq_file.exists():
        freq = int(freq_file.read_text())
        checks.append(check("Frequency locked", abs(freq - 2600000) < 100000, f"{freq/1000000:.2f} GHz"))
    
    passed = sum(checks)
    total = len(checks)
    print(f"\n{Colors.BOLD}Result: {passed}/{total} checks passed{Colors.END}")
    
    if passed == total:
        print(f"{Colors.GREEN}✓ Part 1 configuration successful!{Colors.END}")
        return 0
    else:
        print(f"{Colors.YELLOW}Some checks failed. Review configuration.{Colors.END}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
VERIFY_EOF

chmod +x /root/verify_part1_config.py
echo "  ✓ Created /root/verify_part1_config.py"
echo ""

# Summary
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Installation Complete!${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo -e "${YELLOW}NEXT STEPS:${NC}"
echo ""
echo "1. Review the configuration:"
echo "   - GRUB: /etc/default/grub.d/jouletrace-isolation.cfg"
echo "   - Boot script: /etc/rc.local"
echo "   - MSR config: /etc/modules-load.d/jouletrace.conf"
echo ""
echo "2. REBOOT your system:"
echo -e "   ${RED}sudo reboot${NC}"
echo ""
echo "3. After reboot, verify configuration:"
echo "   sudo python3 /root/verify_part1_config.py"
echo ""
echo "4. Check boot log:"
echo "   cat /var/log/jouletrace-boot.log"
echo ""
echo "5. Manual verification:"
echo "   cat /proc/cmdline"
echo "   cat /sys/devices/system/cpu/isolated"
echo "   cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq"
echo ""
echo -e "${BLUE}Backups saved to: $BACKUP_DIR${NC}"
echo ""
echo -e "${YELLOW}Ready to proceed with Part 1 (System Configuration)${NC}"
echo "Once verified, you can start Episode 1 (PCM Foundation)"
echo ""
