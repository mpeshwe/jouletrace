# jouletrace/docker/docker-compose.yml
# Socket 0 Isolation Architecture - Production Configuration

version: '3.8'

services:
  # Redis - Message broker and result backend
  redis:
    image: redis:7-alpine
    container_name: jouletrace-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - jouletrace-network
    # Bind to Socket 1 CPUs (infrastructure socket)
    cpuset: "1,3,5,7,9,11,13,15,17,19,21,23"

  # FastAPI Application Server
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: jouletrace-api
    ports:
      - "8000:8000"
    volumes:
      - ../jouletrace:/app/jouletrace:ro
      - ../config:/app/config:ro  # Mount calibration config
      - /sys:/sys:ro  # Allow API to read RAPL sysfs for health checks
      - logs:/var/log/jouletrace
    environment:
      # Environment
      - JOULETRACE_ENVIRONMENT=production
      - JOULETRACE_DEBUG=false
      
      # Redis connection
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      
      # API settings - Multiple workers for parallel requests
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_TO_FILE=true
      - LOG_JSON_LOGGING=false
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - jouletrace-network
    # API on Socket 1 (infrastructure socket)
    cpuset: "1,3,5,7"
    user: "0:0"  # Run as root so API can read RAPL sysfs for health
    privileged: true  # Allow full access to /sys RAPL if restricted by LSM

  # Celery Worker 1 - Socket 0 Measurements (Primary)
  # Runs on Socket 1, delegates to Socket 0 via SocketExecutor
  worker-socket0-1:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: jouletrace-worker-socket0-1
    command: >
      celery -A jouletrace.api.tasks worker 
      --loglevel=info 
      --concurrency=1 
      --max-tasks-per-child=50 
      --queues=socket0_measurements
      --hostname=socket0-worker-1@%h
    volumes:
      - ../jouletrace:/app/jouletrace:ro
      - ../config:/app/config:ro  # Mount calibration for worker
      - logs:/var/log/jouletrace
      - /sys:/sys:ro  # Read-only access to sysfs for isolation checks
    environment:
      # Environment
      - JOULETRACE_ENVIRONMENT=production
      - JOULETRACE_DEBUG=false
      
      # Redis/Celery
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CELERY_WORKER_CONCURRENCY=1
      - CELERY_WORKER_PREFETCH_MULTIPLIER=1
      - CELERY_TASK_SOFT_TIME_LIMIT=1800
      - CELERY_TASK_TIME_LIMIT=2400
      
      # Energy measurement
      - ENERGY_USE_SUDO=false  # Already root in container
      - ENERGY_MEASUREMENT_CORE=4  # Socket 0 CPU
      
      # Logging
      - LOG_LEVEL=INFO
      - LOG_TO_FILE=true
      - LOG_JSON_LOGGING=false
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - jouletrace-network
    # Worker runs on Socket 1, uses SocketExecutor to delegate to Socket 0
    cpuset: "1,3,4"  # include measurement core 4
    privileged: true  # Need access to MSR, RAPL counters
    user: "0:0"      # Run worker as root to access /dev/cpu/*/msr

  # Celery Worker 2 - Socket 0 Measurements (Secondary)
  worker-socket0-2:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: jouletrace-worker-socket0-2
    command: >
      celery -A jouletrace.api.tasks worker 
      --loglevel=info 
      --concurrency=1 
      --max-tasks-per-child=50 
      --queues=socket0_measurements
      --hostname=socket0-worker-2@%h
    volumes:
      - ../jouletrace:/app/jouletrace:ro
      - ../config:/app/config:ro
      - logs:/var/log/jouletrace
      - /sys:/sys:ro
    environment:
      - JOULETRACE_ENVIRONMENT=production
      - JOULETRACE_DEBUG=false
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CELERY_WORKER_CONCURRENCY=1
      - CELERY_WORKER_PREFETCH_MULTIPLIER=1
      - CELERY_TASK_SOFT_TIME_LIMIT=1800
      - CELERY_TASK_TIME_LIMIT=2400
      - ENERGY_USE_SUDO=false
      - ENERGY_MEASUREMENT_CORE=4
      - LOG_LEVEL=INFO
      - LOG_TO_FILE=true
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - jouletrace-network
    cpuset: "5,7,4"  # include measurement core 4
    privileged: true
    user: "0:0"

  # Flower - Celery Monitoring Dashboard
  flower:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: jouletrace-flower
    command: celery -A jouletrace.api.tasks flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - jouletrace-network
    cpuset: "1,3"

volumes:
  redis_data:
    driver: local
  logs:
    driver: local

networks:
  jouletrace-network:
    driver: bridge

# ============================================================================
# Socket 0 Isolation Architecture - Deployment Guide
# ============================================================================
#
# ARCHITECTURE OVERVIEW:
# ---------------------
# Socket 0 (21 CPUs): ISOLATED for measurements only
#   - CPUs: 0,2,4,6,8,10,12,14,18,22,24,26,28,30,34,36,38,40,42,44,46
#   - Frequency: Locked at 2.6 GHz
#   - Turbo: Disabled
#   - Processes: 0 (fully isolated)
#   - Measurements: Serial execution via SocketExecutor + Redis lock
#
# Socket 1 (23 CPUs): Infrastructure (API, Workers, Redis)
#   - API: 4 workers handling HTTP requests
#   - Celery: 2 workers processing measurement tasks
#   - Redis: Message broker
#   - All services pinned to Socket 1 CPUs
#
# MEASUREMENT FLOW:
# ----------------
# 1. Client → API (Socket 1) → Queue task
# 2. Worker (Socket 1) picks up task
# 3. Worker acquires Redis lock for Socket 0
# 4. Worker uses SocketExecutor to spawn subprocess on Socket 0 CPU 4
# 5. Subprocess executes code, PCM measures socket energy
# 6. Worker releases lock, returns results
#
# WHY ONLY 2 WORKERS?
# ------------------
# - Socket 0 is serial (Redis lock ensures one measurement at a time)
# - More workers = more parallelism for validation/setup, but measurement is still serial
# - 2 workers provide redundancy + can validate next tasks while one measures
#
# PREREQUISITES:
# -------------
# 1. Host system must have Socket 0 isolation configured (Part 1)
# 2. Socket 0 must be calibrated:
#    sudo python3 scripts/calibrate_socket0.py
# 3. Calibration file must exist: config/socket0_calibration.json
#
# DEPLOYMENT:
# ----------
# 1. Build and start:
#    cd jouletrace/docker
#    docker-compose up -d --build
#
# 2. Verify services:
#    docker-compose ps
#    curl http://localhost:8000/api/v1/socket0/status
#
# 3. Check worker logs:
#    docker-compose logs -f worker-socket0-1
#
# 4. Monitor with Flower:
#    http://localhost:5555
#
# 5. Submit test measurement:
#    curl -X POST http://localhost:8000/api/v1/measure-socket0 \
#      -H "Content-Type: application/json" \
#      -d '{
#        "candidate_code": "def solve(n): return n * 2",
#        "test_cases": [
#          {"inputs": 5, "expected_output": 10, "test_id": "t1"}
#        ],
#        "function_name": "solve",
#        "energy_measurement_trials": 3
#      }'
#
# SCALING:
# -------
# - API workers: Scale up for more HTTP throughput
# - Celery workers: 2-4 sufficient (Socket 0 is bottleneck)
# - Don't add workers to Socket 0 - breaks isolation!
#
# TROUBLESHOOTING:
# ---------------
# - "Socket 0 not calibrated": Run calibration script on host
# - "Lock timeout": Redis not accessible or another measurement stuck
# - "Permission denied": Container needs privileged mode for RAPL
# - "Isolated CPUs not found": Host system Part 1 not configured
#
# PRODUCTION NOTES:
# ----------------
# - Use external Redis (not container) for resilience
# - Mount /sys read-only for security
# - Consider Kubernetes for multi-node orchestration
# - Monitor calibration age (recalibrate weekly)
# - Set resource limits per service
# - Use secrets management for sensitive config
# - Enable HTTPS via reverse proxy (nginx/traefik)
